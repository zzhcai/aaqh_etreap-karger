/**
 * Purpose : COMP90077 Adv Algs & DS (2022) - Assignment 2
 * @author Zhen Cai (1049487) <zhcai@student.unimelb.edu.au>
 */

#include "generator.h"

random_device rd;
mt19937 rng(rd());
uniform_int_distribution<> dis(0, pow(10,7));

int Generator::id_next = 1;

/**
 * id <- id_next, id_next <- id_next + 1.
 * key <- an integer that is drawn uniformly at random from the range [0, 10^7].
 * Return element (id, key).
 */
inline Data *Generator::gen_element() {
    Data *e = new Data(id_next++, dis(rng));
    els[e->id] = e->key;
    return e;
}

/**
 * x <- a new element generated by invoking gen_element().
 * Return (INSERTION, x), an insertion for x.
 */
Job Generator::gen_insertion() {
    Data *e = gen_element();
    return Job(INSERTION, e, e->key);
}

/**
 * key_sch <- an integer that is drawn uniformly at random from the range [0, 10^7].
 * Return (SEARCH, key_sch), a search operation with search key key_sch.
 */
Job Generator::gen_search() const {
    return Job(SEARCH, NULL, dis(rng));
}

/**
 * id_del <- an integer that is drawn uniformly at random from the range [1, id_next-1].
 * If the element x with id_del has already been deleted:
 *   - keydel <- an integer that is drawn uniformly at random from the range [0, 10^7];
 *   - return (DELETION, key_del), a deletion for deleting the search key key_del.
 * Otherwise, return (DELETION, key_del), a deletion for deleting the search key x.key of the element x.
 */
Job Generator::gen_deletion()
{
    if (id_next <= 1) {
        return Job(DELETION, NULL, -1);
    }
    
    int id_del = rand() % (id_next - 1) + 1;
    int key_del;

    if (els[id_del] == -1) {
        key_del = dis(rng);
    } else {
        key_del = els[id_del];
        els[id_del] = -1;
    }
    return Job(DELETION, NULL, key_del);
}
